/*Declare Vector as object*/
vector :	STRUCT
                x : INTEGER;
                y : INTEGER;
            END_STRUCT
/*Function DOT_Product*/  
FUNCTION dot_product(v1, v2: vector) : INTEGER
BEGIN
    RETURN (v1.x * v2.x + v1.y * v2.y);
END
/*Programme that determines whether two vectors are orthogonal*/
ALGORITHM Orthogonal_VECT
VAR
    i, j, L: INTEGER; 
    maxLength : INTEGER := 100;
    VectArr : ARRAY_OF vector[maxLength];
BEGIN
/*It gets the length of the array*/
    REPEAT
        Write("Enter vector array's length");
        Read(L);
    UNTIL ((L <= 0) AND (L >= maxLength));
/*Enter Vectors*/
    FOR i FROM 0 TO (L-1) DO
        Write("Enter vector's x");
        Read(VectArr[i].x);
        Write("Enter vector's y");
        Read(VectArr[i].y);
    END_FOR
/*check if two vectors are orthogonal*/
    FOR i FROM 0 TO (L-1)  DO
        FOR j FROM 0 TO (L-1)  DO
            IF (dot_product(VectArr[i], VectArr[j]) = 0) THEN//calling the function in the condition statement
                Write(VectArr[i], "and", VectArr[j], "are orthogonal");
            END_IF
        END_FOR
    END_FOR
END